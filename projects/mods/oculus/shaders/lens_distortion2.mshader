#msh_vertex
#version 330

layout (location = 0) in vec3 in_Position;
//layout (location = 1) in vec4 in_Color;
layout (location = 5) in float in_Vignette;
layout (location = 6) in float in_TimewarpLerpFactor;
layout (location = 10) in vec2 in_TexCoord0; // R
layout (location = 11) in vec2 in_TexCoord1; // G
layout (location = 12) in vec2 in_TexCoord2; // B

uniform vec2 u_EyeToSourceUVScale;
uniform vec2 u_EyeToSourceUVOffset;
uniform mat4 u_EyeRotationStart;
uniform mat4 u_EyeRotationEnd;

out float v_Vignette;
smooth out vec2 v_TexCoord0;
smooth out vec2 v_TexCoord1;
smooth out vec2 v_TexCoord2;

vec2 TimewarpTexCoord(vec2 TexCoord, mat4 rotMat)
{
	// Vertex inputs are in TanEyeAngle space for the R,G,B channels (i.e. after chromatic
	// aberration and distortion). These are now "real world" vectors in direction (x,y,1)
	// relative to the eye of the HMD. Apply the 3x3 timewarp rotation to these vectors.
	vec3 transformed = vec3( mul(rotMat, vec4(TexCoord.xy, 1.0, 1.0)).xyz);
	// Project them back onto the Z=1 plane of the rendered images.
	vec2 flattened = (transformed.xy / transformed.z);
	// Scale them into ([0,0.5],[0,1]) or ([0.5,0],[0,1]) UV lookup space (depending on eye)
	return u_EyeToSourceUVScale * flattened + u_EyeToSourceUVOffset;
}

mat4 lerpMatrix(mat4 a, mat4 b, float t)
{
	return a + (b - a) * t;
}

void main()
{
	mat4 lerpedEyeRot = lerpMatrix(u_EyeRotationStart, u_EyeRotationEnd, in_TimewarpLerpFactor);
	
	v_TexCoord0 = TimewarpTexCoord(in_TexCoord0, lerpedEyeRot);
	v_TexCoord1 = TimewarpTexCoord(in_TexCoord1, lerpedEyeRot);
	v_TexCoord2 = TimewarpTexCoord(in_TexCoord2, lerpedEyeRot);

	gl_Position = vec4(in_Position.xy, 0.5, 1.0);
	v_Vignette = in_Vignette; // For vignette fade
}

#msh_fragment
#version 330

uniform sampler2D u_MainTexture;
uniform vec2 u_MainTextureSize;

in float v_Vignette;
smooth in vec2 v_TexCoord0;
smooth in vec2 v_TexCoord1;
smooth in vec2 v_TexCoord2;

out vec4 out_Color;

void main()
{
	// 3 samples for fixing chromatic aberrations
	float r = texture2D(u_MainTexture, v_TexCoord0).r;
	float g = texture2D(u_MainTexture, v_TexCoord1).g;
	float b = texture2D(u_MainTexture, v_TexCoord2).b;
	// float g = texture2D(u_MainTexture, v_TexCoord0).g;
	// float b = texture2D(u_MainTexture, v_TexCoord0).b;
	
	// The shading is used at the edges of the view to give a smooth fade-to-black effect rather than an abrupt cut-off.
	// A sharp edge triggers the motion-sensing neurons at the edge of our vision and can be very distracting
	out_Color = v_Vignette * vec4(r,g,b, 1.0);

	// Shows red if we got outside the input texture
	// vec2 clampedTexcoord0 = clamp(v_TexCoord0, vec2(0,0), vec2(1,1));
	// if(clampedTexcoord0 == v_TexCoord0)
	// {
	// 	out_Color = v_Vignette * vec4(r,g,b, 1.0);
	// }
	// else
	// {
	// 	out_Color = vec4(1.0, 0.0, 0.0, 1.0);
	// }
	
	//out_Color = vec4(r,g,b, 1.0);
	//out_Color = vec4(v_TexCoord0, 0.0, 1.0);
}



